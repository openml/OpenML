swagger: '2.0'
info:
  title: OpenML API
  description: >-
    REST API for sharing, organizing and reusing machine learning datasets,
    code, and experiments. Follows a predictive URL scheme from endpoint
    https://www.openml.org/api/v1/json (or /xml). You need to add your `api_key`
    to every call (see your account settings), or simply log in.
    See https://www.openml.org/api_data_docs for the file server API.
  version: 1.0.0
schemes:
  - https
basePath: /api/v1/json
produces:
  - application/json
paths:
  '/data/{id}':
    get:
      summary: Get dataset description
      description: >
        Returns information about a dataset. The information includes the name,
        information about the creator, URL to download it and more.
      parameters:
        - name: id
          in: path
          description: Id of the dataset.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: false
          type: string
      tags:
        - data
      responses:
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned
            110 - Please provide data_id.
            111 - Unknown dataset. Data set description with data_id was not found in the database.
            112 - No access granted. This dataset is not shared with you.
        '200':
          description: A dataset description
          schema:
            $ref: '#/definitions/Data'
          examples:
            application/json: |-
              {
                "data_set_description": {
                  "id": "1",
                  "name": "anneal",
                  "version": "2",
                  "description": "...",
                  "format": "ARFF",
                  "upload_date": "2014-04-06 23:19:20",
                  "licence": "Public",
                  "url": "https://www.openml.org/data/download/1/dataset_1_anneal.arff",
                  "file_id": "1",
                  "default_target_attribute": "class",
                  "version_label": "2",
                  "tag": [
                    "study_1",
                    "uci"
                  ],
                  "visibility": "public",
                  "original_data_url": "https://www.openml.org/d/2",
                  "status": "active",
                  "md5_checksum": "d01f6ccd68c88b749b20bbe897de3713"
                }
              }
    delete:
      summary: Delete dataset
      description: >
        Deletes a dataset. Upon success, it returns the ID of the deleted
        dataset.
      parameters:
        - name: id
          in: path
          description: Id of the dataset.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - data
      responses:
        '200':
          description: ID of the deleted dataset
          schema:
            type: object
            properties:
              data_delete:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the deleted dataset, a positive integer'
          examples:
            application/json: |-
              {
                "data_delete": {
                  "id": "4328"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned
            350 - Please provide API key. In order to remove your content, please authenticate.
            351 - Authentication failed. The API key was not valid. Please try to login again, or contact api administrators.
            352 - Dataset does not exists. The data ID could not be linked to an existing dataset.
            353 - Dataset is not owned by you. The dataset is owned by another user. Hence you cannot delete it.
            354 - Dataset is in use by other content. Can not be deleted. The data is used in tasks or runs. Delete other content before deleting this dataset.
            355 - Deleting dataset failed. Deleting the dataset failed. Please contact
            support team.
  '/data':
    post:
      summary: Upload dataset
      consumes:
        - multipart/form-data
      description: |
        Uploads a dataset. Upon success, it returns the data id.
      parameters:
        - name: description
          in: formData
          description: >-
            An XML file describing the dataset. Only name, description, and data
            format are required. Also see the [XSD
            schema](https://www.openml.org/api/v1/xsd/openml.data.upload) and an
            [XML example](https://www.openml.org/api/v1/xml_example/data).
          required: true
          type: file
        - name: dataset
          in: formData
          description: 'The actual dataset, being an ARFF file.'
          required: true
          type: file
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - data
      responses:
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            130 - Problem with file uploading. There was a problem with the file upload.
            131 - Problem validating uploaded description file. The XML description format does not meet the standards.
            132 - Failed to move the files. Internal server error, please contact API administrators.
            133 - Failed to make checksum of datafile. Internal server error, please contact API administrators.
            134 - Failed to insert record in database. Internal server error, please contact API administrators.
            135 - Please provide description xml.
            136 - File failed format verification. The uploaded file is not valid according to the selected file format. Please check the file format specification and try again.
            137 - Please provide API key. In order to share content, please log in or provide your API key.
            138 - Authentication failed. The API key was not valid. Please try to login again, or contact API administrators
            139 - Combination name / version already exists. Leave version out for auto increment
            140 - Both dataset file and dataset url provided. The system is confused since both a dataset file (post) and a dataset url (xml) are provided. Please remove one.
            141 - Neither dataset file or dataset url are provided. Please provide either a dataset file as POST variable, or a dataset url in the description XML.
            142 - Error in processing arff file. Can be a syntax error, or the specified target feature does not exists. For now, we only check on arff files. If a dataset is claimed to be in such a format, and it can not be parsed, this error is returned.
            143 - Suggested target feature not legal. It is possible to suggest a default target feature (for predictive tasks). However, it should be provided in the data.
            144 - Unable to update dataset. The dataset with id could not be found in the database. If you upload a new dataset, unset the id.
        '200':
          description: Id of the uploaded dataset
          schema:
            type: object
            properties:
              upload_data_set:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the uploaded dataset, a positive integer'
          examples:
            application/json: |-
              {
                "upload_data_set": {
                  "id": "4328"
                }
              }
  '/data/qualities/list':
    get:
      summary: List all data qualities
      description: |
        Returns a list of all data qualities in the system.
      parameters:
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - data
      responses:
        '200':
          description: A list of data qualities
          schema:
            $ref: '#/definitions/DataQualityList'
          examples:
            application/json: |-
              {
                "data_qualities_list":{
                  "quality":[
                    "NumberOfClasses",
                    "NumberOfFeatures",
                    "NumberOfInstances",
                    "NumberOfInstancesWithMissingValues",
                    "NumberOfMissingValues",
                    "NumberOfNumericFeatures",
                    "NumberOfSymbolicFeatures"
                  ]
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned
            370 - No data qualities available. There are no data qualities in the system.
  '/data/qualities':
    post:
      summary: Upload dataset qualities
      consumes:
        - multipart/form-data
      description: |
        Uploads dataset qualities. Upon success, it returns the data id.
      parameters:
        - name: description
          in: formData
          description: >-
            An XML file describing the dataset. Only name, description, and data
            format are required. Also see the [XSD
            schema](https://www.openml.org/api/v1/xsd/openml.data.qualities) and an
            [XML example](https://www.openml.org/api/v1/xml_example/data.qualities).
          required: true
          type: file
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - data
      responses:
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            381 - Something wrong with XML, please check did and evaluation_engine_id
            382 - Please provide description xml
            383 - Problem validating uploaded description file
            384 - Dataset not processed yet
  '/data/status/update/':
    post:
      summary: Change the status of a dataset
      consumes:
        - multipart/form-data
      description: >
        Change the status of a dataset, either 'active' or 'deactivated'
      parameters:
        - name: data_id
          in: formData
          description: Id of the dataset.
          required: true
          type: number
          format: integer
        - name: status
          in: formData
          description:  >-
            The status on which to filter the results, either 'active' or 'deactivated'.
          required: true
          type: string
        - name: api_key
          in: formData
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - data
      responses:
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            691 - Illegal status
            692 - Dataset does not exists
            693 - Dataset is not owned by you
            694 - Illegal status transition
            695 - Status update failed
  '/data/features':
    post:
      summary: Upload dataset feature description
      consumes:
        - multipart/form-data
      description: |
        Uploads dataset feature description. Upon success, it returns the data id.
      parameters:
        - name: description
          in: formData
          description: >-
            An XML file describing the dataset. Only name, description, and data
            format are required. Also see the [XSD
            schema](https://www.openml.org/api/v1/xsd/openml.data.features) and an
            [XML example](https://www.openml.org/api/v1/xml_example/data.features).
          required: true
          type: file
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - data
      responses:
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            431 - Dataset already processed
            432 - Please provide description xml
            433 - Problem validating uploaded description file
            434 - Could not find dataset
            436 - Something wrong with XML, check data id and evaluation engine id
  '/data/features/{id}':
    get:
      summary: Get data features
      description: |
        Returns the features of a dataset.
      parameters:
        - name: id
          in: path
          description: Id of the dataset.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: false
          type: string
      tags:
        - data
      responses:
        '200':
          description: All the features of the dataset
          schema:
            $ref: '#/definitions/DataFeatures'
          examples:
            application/json: |-
              {
                "data_features": {
                  "feature": [
                    {
                      "index": "0",
                      "name": "sepallength",
                      "data_type": "numeric",
                      "is_target": "false",
                      "is_ignore": "false",
                      "is_row_identifier": "false"
                    },
                    {
                      "index": "1",
                      "name": "sepalwidth",
                      "data_type": "numeric",
                      "is_target": "false",
                      "is_ignore": "false",
                      "is_row_identifier": "false"
                    },
                    {
                      "index": "2",
                      "name": "petallength",
                      "data_type": "numeric",
                      "is_target": "false",
                      "is_ignore": "false",
                      "is_row_identifier": "false"
                    },
                    {
                      "index": "3",
                      "name": "petalwidth",
                      "data_type": "numeric",
                      "is_target": "false",
                      "is_ignore": "false",
                      "is_row_identifier": "false"
                    },
                    {
                      "index": "4",
                      "name": "class",
                      "data_type": "nominal",
                      "is_target": "true",
                      "is_ignore": "false",
                      "is_row_identifier": "false"
                    }
                  ]
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            270 - Please provide dataset ID.
            271 - Unknown dataset. Data set with the given data ID was not found (or is not shared with you).
            272 - No features found. The dataset did not contain any features, or we could not extract them.
            273 - Dataset not processed yet. The dataset was not processed yet, features are not yet available. Please wait for a few minutes.
            274 - Dataset processed with error. The feature extractor has run into an error while processing the dataset. Please check whether it is a valid supported file. If so, please contact the API admins.
  '/data/qualities/{id}':
    get:
      summary: Get data qualities
      description: |
        Returns the qualities of a dataset.
      parameters:
        - name: id
          in: path
          description: Id of the dataset.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: false
          type: string
      tags:
        - data
      responses:
        '200':
          description: All the qualities of the dataset
          schema:
            $ref: '#/definitions/DataQualities'
          examples:
            application/json: |-
              {
                "data_qualities": {
                  "quality": [
                    {
                      "name": "ClassCount",
                      "value": "3.0"
                    },
                    {
                      "name": "ClassEntropy",
                      "value": "1.584962500721156"
                    },
                    {
                      "name": "NumberOfClasses",
                      "value": "3"
                    },
                    {
                      "name": "NumberOfFeatures",
                      "value": "5"
                    },
                    {
                      "name": "NumberOfInstances",
                      "value": "150"
                    },
                    {
                      "name": "NumberOfInstancesWithMissingValues",
                      "value": "0"
                    },
                    {
                      "name": "NumberOfMissingValues",
                      "value": "0"
                    },
                    {
                      "name": "NumberOfNumericFeatures",
                      "value": "4"
                    },
                    {
                      "name": "NumberOfSymbolicFeatures",
                      "value": "0"
                    }
                  ]
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            360 - Please provide data set ID
            361 - Unknown dataset. The data set with the given ID was not found in the database, or is not shared with you.
            362 - No qualities found. The registered dataset did not contain any calculated qualities.
            363 - Dataset not processed yet. The dataset was not processed yet, no qualities are available. Please wait for a few minutes.
            364 - Dataset processed with error. The quality calculator has run into an error while processing the dataset. Please check whether it is a valid supported file. If so, contact the support team.
            365 - Interval start or end illegal. There was a problem with the interval
            start or end.
  '/data/list/{filters}':
    get:
      summary: List and filter datasets
      description: |
        List datasets, possibly filtered by a range of properties. Any number of properties can be combined by listing them one after the other in the form '/data/list/{filter}/{value}/{filter}/{value}/...' Returns an array with all datasets that match the constraints.
      parameters:
        - name: filters
          in: path
          description: |
            Any combination of these filters
            /limit/{limit}/offset/{offset} - returns only {limit} results starting from result number {offset}. Useful for paginating results. With /limit/5/offset/10, results 11..15 will be returned. Both limit and offset need to be specified.
            /status/{status} - returns only datasets with a given status, either 'active', 'deactivated', or 'in_preparation'.
            /tag/{tag} - returns only datasets tagged with the given tag.
            /{data_quality}/{range} - returns only tasks for which the underlying datasets have certain qualities. {data_quality} can be data_id, data_name, data_version, number_instances, number_features, number_classes, number_missing_values. {range} can be a specific value or a range in the form 'low..high'. Multiple qualities can be combined, as in 'number_instances/0..50/number_features/0..10'.
          required: true
          type: string
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - data
      responses:
        '200':
          description: A list of datasets with the given task
          schema:
            $ref: '#/definitions/DataList'
          examples:
            application/json: |-
              {
                "data": {
                  "dataset": [
                    {
                      "did":"1",
                      "name":"anneal",
                      "status":"active",
                      "format":"ARFF",
                      "quality":[
                        {
                          "name":"MajorityClassSize",
                          "value":"684"
                        },
                        {
                          "name":"MaxNominalAttDistinctValues",
                          "value":"10.0"
                        },
                        {
                          "name":"MinorityClassSize"
                          ,"value":"0"
                        },
                        {
                          "name":"NumBinaryAtts",
                          "value":"14.0"
                        },
                        {
                          "name":"NumberOfClasses",
                          "value":"6"
                        },
                        {
                          "name":"NumberOfFeatures",
                          "value":"39"
                        },
                        {
                          "name":"NumberOfInstances",
                          "value":"898"
                        },
                        {
                          "name":"NumberOfInstancesWithMissingValues",
                          "value":"0"
                        },
                        {
                          "name":"NumberOfMissingValues",
                          "value":"0"
                        },
                        {
                          "name":"NumberOfNumericFeatures",
                          "value":"6"
                        },
                        {
                          "name":"NumberOfSymbolicFeatures",
                          "value":"32"
                        }
                      ]
                    }
                  ]
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            370 - Illegal filter specified.
            371 - Filter values/ranges not properly specified.
            372 - No results. There where no matches for the given constraints.
            373 - Can not specify an offset without a limit.
  '/data/tag':
    post:
      summary: Tag a dataset
      description: Tags a dataset.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: data_id
          in: formData
          description: Id of the dataset.
          required: true
          type: number
          format: integer
        - name: tag
          in: formData
          description: Tag name
          required: true
          type: string
        - name: api_key
          in: formData
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - data
      responses:
        '200':
          description: The id of the tagged dataset
          schema:
            type: object
            properties:
              data_tag:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the tagged dataset
          examples:
            application/json: |-
              {
                "data_tag": {
                  "id": "2"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            470 - In order to add a tag, please upload the entity id (either data_id, flow_id, run_id) and tag (the name of the tag).
            471 - Entity not found. The provided entity_id {data_id, flow_id, run_id} does not correspond to an existing entity.
            472 - Entity already tagged by this tag. The entity {dataset, flow, run} already had this tag.
            473 - Something went wrong inserting the tag. Please contact OpenML Team.
            474 - Internal error tagging the entity. Please contact OpenML Team.
  '/data/untag':
    post:
      summary: Untag a dataset
      description: Untags a dataset.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: data_id
          in: formData
          description: Id of the dataset.
          required: true
          type: number
        - name: tag
          in: formData
          description: Tag name
          required: true
          type: string
        - name: api_key
          in: formData
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - data
      responses:
        '200':
          description: The ID of the untagged dataset
          schema:
            type: object
            properties:
              data_untag:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the untagged dataset
          examples:
            application/json: |-
              {
                "data_untag": {
                  "id": "2"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            475 - Please give entity_id {data_id, flow_id, run_id} and tag. In order to remove a tag, please upload the entity id (either data_id, flow_id, run_id) and tag (the name of the tag).
            476 - Entity {dataset, flow, run} not found. The provided entity_id {data_id, flow_id, run_id} does not correspond to an existing entity.
            477 - Tag not found. The provided tag is not associated with the entity {dataset, flow, run}.
            478 - Tag is not owned by you. The entity {dataset, flow, run} was tagged by another user. Hence you cannot delete it.
            479 - Internal error removing the tag. Please contact OpenML Team.
  '/data/unprocessed/{data_engine_id}/{order}':
    get:
      summary: >-
        Get a list of unprocessed datasets
      description: >
        This call is for people running their own dataset processing engines. It returns the details of datasets that are not yet processed by the given processing engine. It doesn't process the datasets, it just returns the dataset info.
      parameters:
        - name: data_engine_id
          in: path
          description: >-
            The ID of the data processing engine. You get this ID when you register a new data processing engine with OpenML. The ID of the main data processing engine is 1.
          required: true
          type: string
        - name: order
          in: path
          description: >-
            When there are multiple datasets still to process, this defines which ones to return. Options are 'normal' - the oldest datasets, or 'random'.
          required: true
          type: string
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - evaluation
      responses:
        '200':
          description: A list of unprocessed datasets
          schema:
            $ref: '#/definitions/DataUnprocessed'
          examples:
            application/json:
              data_unprocessed:
                run:
                  - did: '1'
                    name: 'anneal'
                    version: '2'
                    status: 'deactivated'
                    format: 'ARFF'
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            681 - No unprocessed datasets.
  '/data/qualities/unprocessed/{data_engine_id}/{order}':
    post:
      summary: > 
        Get a list of datasets with unprocessed qualities
      description: >
        This call is for people running their own dataset processing engines. It returns the details of datasets for which certain qualities are not yet processed by the given processing engine. It doesn't process the datasets, it just returns the dataset info.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: data_engine_id
          in: path
          description: >-
            The ID of the data processing engine. You get this ID when you register a new data processing engine with OpenML. The ID of the main data processing engine is 1.
          required: true
          type: string
        - name: order
          in: path
          description: >-
            When there are multiple datasets still to process, this defines which ones to return. Options are 'normal' - the oldest datasets, or 'random'.
          required: true
          type: string
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
        - name: qualities
          in: formData
          description: Comma-separated list of (at least two) quality names, e.g. 'NumberOfInstances,NumberOfFeatures'.
          required: true
          type: string
      tags:
        - data
      responses:
        '200':
          description: A list of unprocessed datasets
          schema:
            $ref: '#/definitions/DataUnprocessed'
          examples:
            application/json:
              data_unprocessed:
                run:
                  - did: '1'
                    name: 'anneal'
                    version: '2'
                    status: 'deactivated'
                    format: 'ARFF'
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            686 - Please specify the features the evaluation engine wants to calculate (at least 2).
            687 - No unprocessed datasets according to the given set of meta-features.
            688 - Illegal qualities.
  '/task/{id}':
    get:
      summary: Get task description
      description: >
        Returns information about a task. The information includes the task
        type, input data, train/test sets, and more.
      parameters:
        - name: id
          in: path
          description: ID of the task.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: false
          type: string
      tags:
        - task
      responses:
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            150 - Please provide task_id.
            151 - Unknown task. The task with the given id was not found in the database
        '200':
          description: A task description
          schema:
            $ref: '#/definitions/Task'
          examples:
            application/json: |-
              {
                "task": {
                  "task_id":"1",
                  "task_type":"Supervised Classification",
                  "input":[
                    {
                      "name":"source_data",
                      "data_set":{
                        "data_set_id":"1",
                        "target_feature":"class"
                      }
                    },
                    {
                      "name":"estimation_procedure",
                      "estimation_procedure":{
                        "type":"crossvalidation",
                        "data_splits_url":"https://www.openml.org/api_splits/get/1/Task_1_splits.arff",
                        "parameter":[
                          {
                            "name":"number_repeats",
                            "value":"1"
                          },
                          {
                            "name":"number_folds",
                            "value":"10"
                          },
                          {
                            "name":"percentage"
                          },
                          {
                            "name":"stratified_sampling",
                            "value":"true"
                          }
                        ]
                      }
                    },
                    {
                      "name":"cost_matrix",
                      "cost_matrix":[]
                    },
                    {
                      "name":"evaluation_measures",
                      "evaluation_measures":
                        {
                          "evaluation_measure":"predictive_accuracy"
                        }
                    }
                  ],
                  "output":{
                    "name":"predictions",
                    "predictions":{
                      "format":"ARFF",
                      "feature":[
                        {
                          "name":"repeat",
                          "type":"integer"
                        },
                        {
                          "name":"fold",
                          "type":"integer"
                        },
                        {
                          "name":"row_id",
                          "type":"integer"
                        },
                        {
                          "name":"confidence.classname",
                          "type":"numeric"
                        },
                        {
                          "name":"prediction",
                          "type":"string"
                        }
                      ]
                    }
                  },
                  "tag":["basic","study_1","under100k","under1m"]
                }
              }
    delete:
      summary: Delete task
      description: |
        Deletes a task. Upon success, it returns the ID of the deleted task.
      parameters:
        - name: id
          in: path
          description: Id of the task.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - task
      responses:
        '200':
          description: ID of the deleted task
          schema:
            type: object
            properties:
              task_delete:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the deleted task, a positive integer'
          examples:
            application/json: |-
              {
                "task_delete": {
                  "id": "4328"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            450 - Please provide API key. In order to remove your content, please authenticate.
            451 - Authentication failed. The API key was not valid. Please try to login again, or contact api administrators.
            452 - Task does not exists. The task ID could not be linked to an existing task.
            454 - Task is executed in some runs. Delete these first.
            455 - Deleting the task failed. Please contact support team.
  /task:
    post:
      summary: Upload task
      consumes:
        - multipart/form-data
      description: |
        Uploads a task. Upon success, it returns the task id.
      parameters:
        - name: description
          in: formData
          description: >-
            An XML file describing the task. Only name, description, and task
            format are required. Also see the [XSD
            schema](https://www.openml.org/api/v1/xsd/openml.task.upload) and an
            [XML example](https://www.openml.org/api/v1/xml_example/task).
          required: true
          type: file
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - task
      responses:
        '200':
          description: Id of the uploaded task
          schema:
            type: object
            properties:
              upload_task:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the uploaded task, a positive integer'
          examples:
            application/json: |-
              {
                "upload_task": {
                  "id": "4328"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            530 - Description file not present. Please upload the task description.
            531 - Internal error. Please contact api support team
            532 - Problem validating uploaded description file. The XML description format does not meet the standards
            533 - Task already exists.
            534 - Error creating the task.
  '/task/list/{filters}':
    get:
      summary: List and filter tasks
      description: >
        List tasks, possibly filtered by a range of properties from the task itself or from the underlying dataset. Any number of properties can be combined by listing them one after the other in the form '/task/list/{filter}/{value}/{filter}/{value}/...' Returns an array with all tasks that match the constraints.
      parameters:
        - name: filters
          in: path
          description: |
            Any combination of these filters
            /limit/{limit}/offset/{offset} - returns only {limit} results starting from result number {offset}. Useful for paginating results. With /limit/5/offset/10, tasks 11..15 will be returned. Both limit and offset need to be specified.
            /status/{status} - returns only tasks with a given status, either 'active', 'deactivated', or 'in_preparation'.
            /type/{type_id} - returns only tasks with a given task type id. See the list of task types of the ID's (e.g. 1 = Supervised Classification).
            /tag/{tag} - returns only tasks tagged with the given tag.
            /data_tag/{tag} - returns only tasks for which the underlying dataset is tagged with the given tag.
            /{data_quality}/{range} - returns only tasks for which the underlying datasets have certain qualities. {data_quality} can be data_id, data_name, number_instances, number_features, number_classes, number_missing_values. {range} can be a specific value or a range in the form 'low..high'. Multiple qualities can be combined, as in 'number_instances/0..50/number_features/0..10'.
          required: true
          type: string
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - task
      responses:
        '200':
          description: A list of tasks with the given tag
          schema:
            $ref: '#/definitions/TaskList'
          examples:
            application/json: |-
              {
                "task": {
                  "task": [
                    {
                      "task_id":"1",
                      "task_type":"Supervised Classification",
                      "did":"1",
                      "name":"anneal",
                      "status":"active",
                      "format":"ARFF",
                      "input":[
                        {
                          "name":"estimation_procedure",
                          "value":"1"
                        },
                        {
                          "name":"evaluation_measures",
                          "value":"predictive_accuracy"
                        },
                        {
                          "name":"source_data",
                          "value":"1"
                        },
                        {
                          "name":"target_feature",
                          "value":"class"
                        }
                        ],
                      "quality":[
                        {
                          "name":"MajorityClassSize",
                          "value":"684"
                        },
                        {
                          "name":"MaxNominalAttDistinctValues",
                          "value":"10.0"
                        },
                        {
                          "name":"MinorityClassSize",
                          "value":"0"
                        },
                        {
                          "name":"NumBinaryAtts",
                          "value":"14.0"
                        },
                        {
                          "name":"NumberOfClasses",
                          "value":"6"
                        },
                        {
                          "name":"NumberOfFeatures",
                          "value":"39"
                        },
                        {
                          "name":"NumberOfInstances",
                          "value":"898"
                        },
                        {
                          "name":"NumberOfInstancesWithMissingValues",
                          "value":"0"
                        },
                        {
                          "name":"NumberOfMissingValues",
                          "value":"0"
                        },
                        {
                          "name":"NumberOfNumericFeatures",
                          "value":"6"
                        },
                        {
                          "name":"NumberOfSymbolicFeatures",
                          "value":"32"
                        }
                        ],
                      "tag":[
                        "basic",
                        "study_1",
                        "study_7",
                        "under100k",
                        "under1m"
                      ]
                    }
                  ]
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            480 - Illegal filter specified.
            481 - Filter values/ranges not properly specified.
            482 - No results. There where no matches for the given constraints.
            483 - Can not specify an offset without a limit.
  /task/tag:
    post:
      summary: Tag a task
      description: Tags a task.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: task_id
          in: formData
          description: Id of the task.
          required: true
          type: number
          format: integer
        - name: tag
          in: formData
          description: Tag name
          required: true
          type: string
        - name: api_key
          in: formData
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - task
      responses:
        '200':
          description: The id of the tagged task
          schema:
            type: object
            properties:
              task_tag:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the tagged task
          examples:
            application/json: |-
              {
                "task_tag": {
                  "id": "2"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            470 - In order to add a tag, please upload the entity id (either data_id, task_id, flow_id, run_id) and tag (the name of the tag).
            471 - Entity not found. The provided entity_id {data_id, task_id, flow_id, run_id} does not correspond to an existing entity.
            472 - Entity already tagged by this tag. The entity {dataset, task, flow, run} already had this tag.
            473 - Something went wrong inserting the tag. Please contact OpenML Team.
            474 - Internal error tagging the entity. Please contact OpenML Team.
  /task/untag:
    post:
      summary: Untag a task
      description: Untags a task.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: task_id
          in: formData
          description: Id of the task.
          required: true
          type: number
        - name: tag
          in: formData
          description: Tag name
          required: true
          type: string
        - name: api_key
          in: formData
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - task
      responses:
        '200':
          description: A the features of the task
          schema:
            type: object
            properties:
              task_untag:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the untagged task
          examples:
            application/json: |-
              {
                "task_untag": {
                  "id": "2"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            475 - Please give entity_id {data_id, flow_id, run_id} and tag. In order to remove a tag, please upload the entity id (either data_id, task_id, flow_id, run_id) and tag (the name of the tag).
            476 - Entity {dataset, task, flow, run} not found. The provided entity_id {data_id, task_id, flow_id, run_id} does not correspond to an existing entity.
            477 - Tag not found. The provided tag is not associated with the entity {dataset, task, flow, run}.
            478 - Tag is not owned by you. The entity {dataset, flow, run} was tagged by another user. Hence you cannot delete it.
            479 - Internal error removing the tag. Please contact OpenML Team.
  '/tasktype/{id}':
    get:
      summary: Get task type description
      description: >
        Returns information about a task type. The information includes a
        description, the given inputs and the expected outputs.
      parameters:
        - name: id
          in: path
          description: ID of the task.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: false
          type: string
      tags:
        - tasktype
      responses:
        '200':
          description: A task type description
          schema:
            $ref: '#/definitions/TaskType'
          examples:
            application/json: |-
              {
                "task_type": {
                  "id": "1",
                  "name": "Supervised Classification",
                  "description": "In supervised classification, you are given an input dataset in which instances are labeled with a certain class. The goal is to build a model that predicts the class for future unlabeled instances. The model is evaluated using a train-test procedure, e.g. cross-validation.<br><br>\n\nTo make results by different users comparable, you are given the exact train-test folds to be used, and you need to return at least the predictions generated by your model for each of the test instances. OpenML will use these predictions to calculate a range of evaluation measures on the server.<br><br>\n\nYou can also upload your own evaluation measures, provided that the code for doing so is available from the implementation used. For extremely large datasets, it may be infeasible to upload all predictions. In those cases, you need to compute and provide the evaluations yourself.<br><br>\n\nOptionally, you can upload the model trained on all the input data. There is no restriction on the file format, but please use a well-known format or PMML.",
                  "creator": [
                    "Joaquin Vanschoren",
                    "Jan van Rijn",
                    "Luis Torgo",
                    "Bernd Bischl"
                  ],
                  "contributor": [
                    "Bo Gao",
                    "Simon Fischer",
                    "Venkatesh Umaashankar",
                    "Michael Berthold",
                    "Bernd Wiswedel",
                    "Patrick Winter"
                  ],
                  "creation_date": "2013-01-24 00:00:00",
                  "input": [
                    {
                      "name": "source_data",
                      "requirement": "required",
                      "data_type": "numeric"
                    },
                    {
                      "name": "target_feature",
                      "requirement": "required",
                      "data_type": "string"
                    },
                    {
                      "name": "estimation_procedure",
                      "requirement": "required",
                      "data_type": "numeric"
                    },
                    {
                      "name": "cost_matrix",
                      "data_type": "json"
                    },
                    {
                      "name": "custom_testset",
                      "data_type": "json"
                    },
                    {
                      "name": "evaluation_measures",
                      "data_type": "string"
                    }
                  ]
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            240 - Please provide task type ID.
            241 - Unknown task type. The task type with the given id was not found in the database
  '/tasktype/list':
    get:
      summary: List all task types
      description: |
        Returns an array with all task types in the system.
      parameters:
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - tasktype
      responses:
        '200':
          description: A task description
          schema:
            $ref: '#/definitions/TaskTypeList'
          examples:
            application/json: |-
              {
                "task_types":{
                  "task_type":[
                    {
                      "id":"1",
                      "name":"Supervised Classification",
                      "description":"In supervised classification, you are given ...",
                      "creator":"Joaquin Vanschoren, Jan van Rijn, Luis Torgo, Bernd Bischl"
                    },
                    {
                      "id":"2",
                      "name":"Supervised Regression",
                      "description":"Given a dataset with a numeric target ...",
                      "creator":"Joaquin Vanschoren, Jan van Rijn, Luis Torgo, Bernd Bischl"
                    },{}
                  ]
                }
              }
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/flow/{id}':
    get:
      summary: Get flow description
      description: >
        Returns information about a flow. The information includes the name,
        information about the creator, dependencies, parameters, run
        instructions and more.
      parameters:
        - name: id
          in: path
          description: ID of the flow.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - flow
      responses:
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            180 - Please provide flow id.
            181 - Unknown flow. The flow with the given ID was not found in the database.
        '200':
          description: A flow description
          schema:
            $ref: '#/definitions/Flow'
          examples:
            application/json: |-
              {
                "flow": {
                  "id":"100",
                  "uploader":"1",
                  "name":"weka.J48",
                  "version":"2",
                  "external_version":"Weka_3.7.5_9117",
                  "description":"...",
                  "upload_date":"2014-04-23 18:00:36",
                  "language":"Java",
                  "dependencies":"Weka_3.7.5",
                  "parameter": [
                    {
                      "name":"A",
                      "data_type":"flag",
                      "default_value":[],
                      "description":"Laplace smoothing..."
                    },
                    {
                      "name":"C",
                      "data_type":"option",
                      "default_value":"0.25",
                      "description":"Set confidence threshold..."
                    }
                  ]
                }
              }
    delete:
      summary: Delete a flow
      description: |
        Deletes a flow. Upon success, it returns the ID of the deleted flow.
      parameters:
        - name: id
          in: path
          description: Id of the flow.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: true
          type: string
      tags:
        - flow
      responses:
        '200':
          description: ID of the deleted flow
          schema:
            type: object
            properties:
              flow_delete:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the deleted flow, a positive integer'
          examples:
            application/json: |-
              {
                "flow_delete": {
                  "id": "4328"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            320 - Please provide API key. In order to remove your content, please authenticate.
            321 - Authentication failed. The API key was not valid. Please try to login again, or contact api administrators.
            322 - Flow does not exists. The flow ID could not be linked to an existing flow.
            323 - Flow is not owned by you. The flow is owned by another user. Hence you cannot delete it.
            324 - Flow is in use by other content. Can not be deleted. The flow is used in runs, evaluations or as a component of another flow. Delete other content before deleting this flow.
            325 - Deleting flow failed. Deleting the flow failed. Please contact
            support team.
  '/flow':
    post:
      summary: Upload a flow
      consumes:
        - multipart/form-data
      description: |
        Uploads a flow. Upon success, it returns the flow id.
      parameters:
        - name: description
          in: formData
          description: >-
            An XML file describing the flow. Only name and description are
            required. Also see the [XSD
            schema](https://www.openml.org/api/v1/xsd/openml.implementation.upload)
            and an [XML
            example](https://www.openml.org/api/v1/xml_example/flow).
          required: true
          type: file
        - name: flow
          in: formData
          description: 'The actual flow, being a source (or binary) file.'
          required: false
          type: file
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - flow
      responses:
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            160 - Error in file uploading. There was a problem with the file upload.
            161 - Please provide description xml.
            163 - Problem validating uploaded description file. The XML description format does not meet the standards.
            164 - Flow already stored in database. Please change name or version number
            165 - Failed to insert flow. There can be many causes for this error. If you included the implements field, it should be an existing entry in the algorithm or math_function table. Otherwise it could be an internal server error. Please contact API support team.
            166 - Failed to add flow to database. Internal server error, please contact API administrators
            167 - Illegal files uploaded. An non required file was uploaded.
            168 - The provided md5 hash equals not the server generated md5 hash of the file.
            169 - Please provide API key. In order to share content, please authenticate and provide API key.
            170 - Authentication failed. The API key was not valid. Please try to login again, or contact API administrators
            171 - Flow already exists. This flow is already in the database
            172 - XSD not found. Please contact API support team
        '200':
          description: Id of the uploaded flow
          schema:
            type: object
            properties:
              upload_flow:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the uploaded flow, a positive integer'
          examples:
            application/json: |-
              {
                "upload_flow": {
                  "id": "2520"
                }
              }
  '/flow/exists/{name}/{version}':
    get:
      summary: Check whether flow exists
      description: |
        Checks whether a flow with the given name and (external) version exists.
      parameters:
        - name: name
          in: path
          description: The name of the flow.
          required: true
          type: string
        - name: version
          in: path
          description: The external version of the flow
          required: true
          type: string
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - flow
      responses:
        '200':
          description: A list of flows
          schema:
            type: object
            properties:
              flow_exists:
                type: object
                properties:
                  exists:
                    type: string
                    description: true or false
                  id:
                    type: string
                    description: >-
                      The id of the flow with the given name and (external)
                      version
          examples:
            application/json: |-
              {
                "flow_exists": {
                  "exists": "true",
                  "id": "65"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            330 - Mandatory fields not present. Please provide name and external_version.
  '/flow/list/{filters}':
    get:
      summary: List and filter flows
      description: >
        List flows, possibly filtered by a range of properties. Any number of properties can be combined by listing them one after the other in the form '/task/list/{filter}/{value}/{filter}/{value}/...' Returns an array with all flows that match the constraints.
      parameters:
        - name: filters
          in: path
          description: |
            Any combination of these filters
            /limit/{limit}/offset/{offset} - returns only {limit} results starting from result number {offset}. Useful for paginating results. With /limit/5/offset/10, tasks 11..15 will be returned. Both limit and offset need to be specified.
            /tag/{tag} - returns only tasks tagged with the given tag.
            /uploader/{id} - return only evaluations uploaded by a specific user, specified by user ID.
          required: true
          type: string
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - flow
      responses:
        '200':
          description: A list of flows
          schema:
            $ref: '#/definitions/FlowList'
          examples:
            application/json: |-
              {
                "flows":
                  {
                    "flow":[
                      {
                        "id":"65",
                        "full_name":"weka.RandomForest(1)",
                        "name":"weka.RandomForest",
                        "version":"1",
                        "external_version":"Weka_3.7.10_9186",
                        "uploader":"1"
                      },
                      {
                        "id":"66",
                        "full_name":"weka.IBk(1)",
                        "name":"weka.IBk",
                        "version":"1",
                        "external_version":"Weka_3.7.10_8034",
                        "uploader":"1"
                      },
                      {
                        "id":"67",
                        "full_name":"weka.BayesNet_K2(1)",
                        "name":"weka.BayesNet_K2",
                        "version":"1",
                        "external_version":"Weka_3.7.10_8034",
                        "uploader":"1"
                      }
                    ]
                  }
                }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            500 - No results. There where no matches for the given constraints.
            501 - Illegal filter specified.
            502 - Filter values/ranges not properly specified.
            503 - Can not specify an offset without a limit.
  '/flow/owned':
    get:
      summary: List flows owned by you
      description: |
        Returns an array with all flows owned by you.
      parameters:
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - flow
      responses:
        '200':
          description: A list of flows
          schema:
            type: object
            properties:
              flow_owned:
                type: object
                properties:
                  id:
                    type: array
                    items:
                      type: string
          examples:
            application/json: |-
              {
                "flow_owned": {
                  "id": [
                    "111",
                    "112",
                    "113",
                    "114",
                    "115",
                    "116",
                    "117"
                  ]
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            310 - Please provide API key to authenticate.
            311 - Authentication failed. The API key was not valid. Please try to login again, or contact api administrators.
            312 - No flows owned by you.
  '/flow/tag':
    post:
      summary: Tag a flow
      description: Tags a flow.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: flow_id
          in: formData
          description: Id of the flow.
          required: true
          type: number
          format: integer
        - name: tag
          in: formData
          description: Tag name
          required: true
          type: string
        - name: api_key
          in: formData
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - flow
      responses:
        '200':
          description: The id of the tagged flow
          schema:
            type: object
            properties:
              flow_tag:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the tagged flow
          examples:
            application/json: |-
              {
                "flow_tag": {
                  "id": "2"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            470 - In order to add a tag, please upload the entity id (either data_id, flow_id, run_id) and tag (the name of the tag).
            471 - Entity not found. The provided entity_id {data_id, flow_id, run_id} does not correspond to an existing entity.
            472 - Entity already tagged by this tag. The entity {dataset, flow, run} already had this tag.
            473 - Something went wrong inserting the tag. Please contact OpenML Team.
            474 - Internal error tagging the entity. Please contact OpenML Team.
  '/flow/untag':
    post:
      summary: Untag a flow
      description: Untags a flow.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: flow_id
          in: formData
          description: Id of the flow.
          required: true
          type: number
        - name: tag
          in: formData
          description: Tag name
          required: true
          type: string
        - name: api_key
          in: formData
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - flow
      responses:
        '200':
          description: The id of the untagged flow
          schema:
            type: object
            properties:
              flow_untag:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the untagged flow
          examples:
            application/json: |-
              {
                "flow_untag": {
                  "id": "2"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            475 - Please give entity_id {data_id, flow_id, run_id} and tag. In order to remove a tag, please upload the entity id (either data_id, flow_id, run_id) and tag (the name of the tag).
            476 - Entity {dataset, flow, run} not found. The provided entity_id {data_id, flow_id, run_id} does not correspond to an existing entity.
            477 - Tag not found. The provided tag is not associated with the entity {dataset, flow, run}.
            478 - Tag is not owned by you. The entity {dataset, flow, run} was tagged
            by another user. Hence you cannot delete it.
            479 - Internal error removing the tag. Please contact OpenML Team.
  '/setup/{id}':
    get:
      summary: Get a hyperparameter setup
      description: >
        Returns information about a setup. The information includes the list of
        hyperparameters, with name, value, and default value.
      parameters:
        - name: id
          in: path
          description: >-
            ID of the hyperparameter setup (configuration). These IDs are stated
            in run descriptions.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - setup
      responses:
        '200':
          description: A setup description
          schema:
            $ref: '#/definitions/Setup'
          examples:
            application/json: |-
              {
                "setup_parameters":{
                  "flow_id":"59",
                  "parameter":[
                    {
                      "full_name":"weka.JRip(1)_F",
                      "parameter_name":"F",
                      "data_type":"option",
                      "default_value":"3",
                      "value":"3"
                    },{
                      "full_name":"weka.JRip(1)_N",
                      "parameter_name":"N",
                      "data_type":"option",
                      "default_value":"2.0",
                      "value":"2.0"
                    },{
                      "full_name":"weka.JRip(1)_O",
                      "parameter_name":"O",
                      "data_type":"option",
                      "default_value":"2",
                      "value":"2"
                    },{
                      "full_name":"weka.JRip(1)_S",
                      "parameter_name":"S",
                      "data_type":"option",
                      "default_value":"1",
                      "value":"1"
                    }]
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            280 - Please provide setup ID. In order to view setup details, please provide the run ID
            281 - Setup not found. The setup ID was invalid, or setup does not exist (anymore).
  '/run/{id}':
    get:
      summary: Get run description
      description: >
        Returns information about a run. The information includes the name,
        information about the creator, dependencies, parameters, run
        instructions and more.
      parameters:
        - name: id
          in: path
          description: ID of the run.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - run
      responses:
        '200':
          description: A run description
          schema:
            $ref: '#/definitions/Run'
          examples:
            application/json: |-
              {
                "run": {
                  "run_id":"100",
                  "uploader":"1",
                  "uploader_name":"Jan van Rijn",
                  "task_id":"28",
                  "task_type":"Supervised Classification",
                  "task_evaluation_measure":"predictive_accuracy",
                  "flow_id":"67",
                  "flow_name":"weka.BayesNet_K2(1)",
                  "setup_string":"weka.classifiers.bayes.BayesNet -- -D -Q weka.classifiers.bayes.net.search.local.K2 -- -P 1 -S BAYES -E weka.classifiers.bayes.net.estimate.SimpleEstimator -- -A 0.5",
                  "parameter_setting": [
                    {
                      "name":"D",
                      "value":"true"
                    },
                    {
                      "name":"Q",
                      "value":"weka.classifiers.bayes.net.search.local.K2"
                    },
                    {
                      "name":"P",
                      "value":"1"
                    },
                    {
                      "name":"S",
                      "value":"BAYES"
                    }
                  ],
                  "input_data":
                    {
                      "dataset":
                        {
                          "did":"28",
                          "name":"optdigits",
                          "url":"https:\/\/www.openml.org\/data\/download\/28\/dataset_28_optdigits.arff"
                        }
                    },
                  "output_data":
                    {
                      "file": [
                        {
                          "did":"48838",
                          "file_id":"261",
                          "name":"description",
                          "url":"https:\/\/www.openml.org\/data\/download\/261\/weka_generated_run935374685998857626.xml"
                        },
                        {
                          "did":"48839",
                          "file_id":"262",
                          "name":"predictions",
                          "url":"https:\/\/www.openml.org\/data\/download\/262\/weka_generated_predictions576954524972002741.arff"
                        }
                      ],
                      "evaluation": [
                        {
                          "name":"area_under_roc_curve",
                          "flow_id":"4",
                          "value":"0.990288",
                          "array_data":"[0.99724,0.989212,0.992776,0.994279,0.980578,0.98649,0.99422,0.99727,0.994858,0.976143]"
                        },
                        {
                          "name":"confusion_matrix",
                          "flow_id":"10",
                          "array_data":"[[544,1,0,0,7,0,1,0,0,1],[0,511,21,1,0,1,3,1,5,28],[0,7,511,1,0,1,0,3,23,11],[0,2,2,519,0,3,0,12,16,18],[0,3,0,0,528,0,4,21,6,6],[0,1,0,7,5,488,2,0,4,51],[1,7,0,0,2,0,548,0,0,0],[0,2,0,1,9,1,0,545,4,4],[1,25,2,2,3,6,2,1,503,9],[0,7,0,20,16,5,0,19,9,486]]"
                        },
                        {
                          "name":"f_measure",
                          "flow_id":"12",
                          "value":"0.922723",
                          "array_data":"[0.989091,0.898857,0.935041,0.92431,0.927944,0.918156,0.980322,0.933219,0.895018,0.826531]"
                        },
                        {
                          "name":"kappa",
                          "flow_id":"13",
                          "value":"0.913601"
                        }
                      ]
                    }
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            220 - Please provide run ID. In order to view run details, please provide the run ID.
            221 - Run not found. The run ID was invalid, run does not exist (anymore).
    delete:
      summary: Delete run
      description: |
        Deletes a run. Upon success, it returns the ID of the deleted run.
      parameters:
        - name: id
          in: path
          description: Id of the run.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: true
          type: string
      tags:
        - run
      responses:
        '200':
          description: ID of the deleted run
          schema:
            type: object
            properties:
              data_delete:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the deleted run, a positive integer'
          examples:
            application/json: |-
              {
                "run_delete": {
                  "id": "2520"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            390 - Please provide API key. In order to remove your content, please authenticate.
            391 - Authentication failed. The API key was not valid. Please try to login again, or contact api administrators
            392 - Run does not exists. The run ID could not be linked to an existing run.
            393 - Run is not owned by you. The run was owned by another user. Hence you cannot delete it.
            394 - Deleting run failed. Deleting the run failed. Please contact support team.
  '/run':
    post:
      summary: Upload run
      consumes:
        - multipart/form-data
      description: |
        Uploads a run. Upon success, it returns the run id.
      parameters:
        - name: description
          in: formData
          description: >-
            An XML file describing the dataset. Only name, description, and data
            format are required. Also see the [XSD
            schema](https://www.openml.org/api/v1/xsd/openml.run.upload) and an
            [XML example](https://www.openml.org/api/v1/xml_example/run).
          required: true
          type: file
        - name: predictions
          in: formData
          description: The predictions generated by the run
          required: true
          type: file
        - name: model_readable
          in: formData
          description: The human-readable model generated by the run
          required: false
          type: file
        - name: model_serialized
          in: formData
          description: The serialized model generated by the run
          required: false
          type: file
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - run
      responses:
        '200':
          description: Id of the uploaded run
          schema:
            type: object
            properties:
              upload_flow:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the uploaded run, a positive integer'
          examples:
            application/json: |-
              {
                "upload_run": {
                  "id": "2520"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            201 - Authentication failed. The API key was not valid. Please try to login again, or contact api administrators.
            202 - Please provide run XML.
            203 - Could not validate run xml by XSD. Please double check that the xml is valid.
            204 - Unknown task. The task with the given ID was not found in the database.
            205 - Unknown flow. The flow with the given ID was not found in the database.
            206 - Invalid number of files. The number of uploaded files did not match the number of files expected for the task type
            207 - File upload failed. One of the files uploaded has a problem.
            208 - Error inserting setup record. Please contact api administrators
            210 - Unable to store run. Please contact api administrators.
            211 - Dataset not in database. One of the datasets of the task was not included in database, please contact api administrators.
            212 - Unable to store file. Please contact api administrators.
            213 - Parameter in run xml unknown. One of the parameters provided in the run xml is not registered as parameter for the flow nor its components.
            214 - Unable to store input setting. Please contact API support team.
            215 - Unable to evaluate predictions. Please contact API support team.
            216 - Error thrown by Java Application. Additional information field is provided.
            217 - Error processing output data. Unknown or inconsistent evaluation measure. One of the provided evaluation measures could not be matched with a record in the math_function or flow table.
            218 - Wrong flow associated with run. The flow implements a math_function, which is unable to generate predictions. Please select another flow.
            219 - Error reading the XML document. The XML description file could not be verified.
  '/run/list/{filters}':
    get:
      summary: List and filter runs
      description: >
        List runs, filtered by a range of properties. Any number of properties can be combined by listing them one after the other in the form '/run/list/{filter}/{value}/{filter}/{value}/...' Returns an array with all runs that match the constraints. A maximum of 10,000 results are returned, an error is returned if the result set is bigger. Use pagination (via limit and offset filters), or limit the results to certain tasks, flows, setups, or uploaders. 
      parameters:
        - name: filters
          in: path
          description: |
            Any combination of these filters
            /tag/{tag} - return only runs tagged with the given tag.
            /run/{ids} - return only specific runs, specified as a comma-separated list of run IDs, e.g. ''1,2,3''
            /task/{ids} - return only runs on specific tasks, specified as a comma-separated list of task IDs, e.g. ''1,2,3''
            /flow/{ids} - return only runs on specific flows, specified as a comma-separated list of flow IDs, e.g. ''1,2,3''
            /setup/{ids} - return only runs with specific setups, specified as a comma-separated list of setup IDs, e.g. ''1,2,3''
            /uploader/{ids} - return only runs uploaded by specific users, specified as a comma-separated list of user IDs, e.g. ''1,2,3''
            /limit/{limit}/offset/{offset} - returns only {limit} results starting from result number {offset}. Useful for paginating results. With /limit/5/offset/10, results 11..15 will be returned. Both limit and offset need to be specified.
          required: true
          type: string
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - run
      responses:
        '200':
          description: A list of runs descriptions
          schema:
            $ref: '#/definitions/RunList'
          examples:
            application/json:
              runs:
                run:
                  - run_id: '100'
                    task_id: '28'
                    setup_id: '12'
                    flow_id: '67'
                    uploader: '1'
                    upload_time: '2014-04-06 23:30:40'
                    error_message: []
                  - run_id: '101'
                    task_id: '48'
                    setup_id: '6'
                    flow_id: '61'
                    uploader: '1'
                    upload_time: '2014-04-06 23:30:40'
                    error_message: []
                  - run_id: '102'
                    task_id: '41'
                    setup_id: '3'
                    flow_id: '58'
                    uploader: '1'
                    upload_time: '2014-04-06 23:30:40'
                    error_message: []
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            510 - Please provide at least task, flow or setup, uploader or run, to filter results, or limit the number of responses. The number of runs is huge. Please limit the result space.
            511 - Input not safe. The input parameters (task_id, setup_id, flow_id, run_id, uploader_id) did not meet the constraints (comma separated list of integers).
            512 - There where no results. Check whether there are runs under the given constraint.
            513 - Too many results. Given the constraints, there were still too many results. Please add filters to narrow down the list.
            514 - Illegal filter specified.
            515 - Offset specified without limit.
            516 - Requested result limit too high.
  '/run/tag':
    post:
      summary: Tag a run
      description: Tags a run.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: run_id
          in: formData
          description: Id of the run.
          required: true
          type: number
          format: integer
        - name: tag
          in: formData
          description: Tag name
          required: true
          type: string
        - name: api_key
          in: formData
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - run
      responses:
        '200':
          description: The id of the tagged run
          schema:
            type: object
            properties:
              run_tag:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the tagged run
          examples:
            application/json: |-
              {
                "run_tag": {
                  "id": "2"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            470 - In order to add a tag, please upload the entity id (either data_id, flow_id, run_id) and tag (the name of the tag).
            471 - Entity not found. The provided entity_id {data_id, flow_id, run_id} does not correspond to an existing entity.
            472 - Entity already tagged by this tag. The entity {dataset, flow, run} already had this tag.
            473 - Something went wrong inserting the tag. Please contact OpenML Team.
            474 - Internal error tagging the entity. Please contact OpenML Team.
  '/run/untag':
    post:
      summary: Untag a run
      description: Untags a run.
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: run_id
          in: formData
          description: Id of the run.
          required: true
          type: number
        - name: tag
          in: formData
          description: Tag name
          required: true
          type: string
        - name: api_key
          in: formData
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - run
      responses:
        '200':
          description: The id of the untagged run
          schema:
            type: object
            properties:
              run_untag:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the untagged run
          examples:
            application/json: |-
              {
                "run_untag": {
                  "id": "2"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            475 - Please give entity_id {data_id, flow_id, run_id} and tag. In order to remove a tag, please upload the entity id (either data_id, flow_id, run_id) and tag (the name of the tag).
            476 - Entity {dataset, flow, run} not found. The provided entity_id {data_id, flow_id, run_id} does not correspond to an existing entity.
            477 - Tag not found. The provided tag is not associated with the entity {dataset, flow, run}.
            478 - Tag is not owned by you. The entity {dataset, flow, run} was tagged by another user. Hence you cannot delete it.
            479 - Internal error removing the tag. Please contact OpenML Team.
  '/run/evaluate':
    post:
      summary: Uploads a run evaluation
      consumes:
        - multipart/form-data
      description: |
        Uploads a run evaluation. When successful, it returns the run id.
      parameters:
        - name: description
          in: formData
          description: >-
            An XML file describing the run evaluation.Also see the [XSD
            schema](https://www.openml.org/api/v1/xsd/openml.run.evaluate) and an
            [XML example](https://www.openml.org/api/v1/xml_example/run.evaluate).
          required: true
          type: file
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - run
      responses:
        '200':
          description: Id of the evaluated run
          schema:
            type: object
            properties:
              upload_flow:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the evaluated run, a positive integer'
          examples:
            application/json: |-
              {
                "run_evaluate": {
                  "id": "2520"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            422 - Upload problem description XML
            423 - Problem validating uploaded description file
            424 - Problem opening description xml
  '/run/reset/{id}':
    get:
      summary: Resets a run.
      description: |
        Removes all run evaluations. When a run is reset, the runs will automatically be evaluated as soon as they are picked up by the evaluation engine again.
      parameters:
        - name: id
          in: path
          description: Run ID.
          required: true
          type: string
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - run
      responses:
        '200':
          description: Id of the evaluated run
          schema:
            type: object
            properties:
              run_reset:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the evaluated run, a positive integer'
          examples:
            application/json: |-
              {
                "run_reset": {
                  "id": "2520"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            412 - Run does not exist
            413 - Run is not owned by you
            394 - Resetting run failed
  '/run/trace/{id}':
    get:
      summary: Get run trace
      description: >
        Returns the optimization trace of run. The trace contains every setup tried, its evaluation, and whether it was selected.
      parameters:
        - name: id
          in: path
          description: ID of the run.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - run
      responses:
        '200':
          description: A run trace description
          schema:
            $ref: '#/definitions/RunTrace'
          examples:
            application/json: |-
              {
                "trace": {
                  "run_id":"573055",
                  "trace_iteration": {
                      "repeat":"0",
                      "fold":"0",
                      "repeat":"0",
                      "iteration":"0",
                      "setup_string":{"parameter_minNumObj": "1",
                                      "parameter_confidenceFactor": "0.1"},
                      "evaluation":"94.814815",
                      "selected": "true"
                    },
                  "trace_iteration": {
                      "repeat":"0",
                      "fold":"0",
                      "repeat":"0",
                      "iteration":"1",
                      "setup_string":{"parameter_minNumObj": "1",
                                      "parameter_confidenceFactor": "0.25"},
                      "evaluation": "94.074074",
                      "selected": "true"
                    }
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            570 - No successful trace associated with this run
    post:
      summary: Upload run trace
      tags:
      - run
      summary: Upload run trace
      description: |
        Uploads a run trace. Upon success, it returns the run id.
      consumes:
        - multipart/form-data
      description: |
        Uploads a run trace. Upon success, it returns the run id.
      parameters:
        - name: id
          in: path
          description: ID of the run.
          required: true
          type: number
          format: integer
        - name: description
          in: formData
          description: >-
            An XML file describing the trace. Also see the [XSD
            schema](https://www.openml.org/api/v1/xsd/openml.run.trace) and an
            [XML example](https://www.openml.org/api/v1/xml_example/run.trace).
          required: true
          type: file
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - run
      responses:
        '200':
          description: Id of the run with the trace
          schema:
            type: object
            properties:
              upload_flow:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the run with the trace, a positive integer'
          examples:
            application/json: |-
              {
                "run_trace": {
                  "id": "2520"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            561 - Problem with uploaded trace file.
            562 - Problem validating xml trace file.
            563 - Problem loading xml trace file.
  '/evaluation/list/{filters}':
    get:
      summary: List and filter evaluations
      description: >
        List evaluations, filtered by a range of properties. Any number of properties can be combined by listing them one after the other in the form '/evaluation/list/{filter}/{value}/{filter}/{value}/...' Returns an array with all evaluations that match the constraints. A maximum of 10,000 results are returned, an error is returned if the result set is bigger. Use pagination (via limit and offset filters), or limit the results to certain tasks, flows, setups, uploaders or runs. 
      parameters:
        - name: filters
          in: path
          description: |
            Any combination of these filters
            /function/{name} - name of the evaluation measure, e.g. area_under_auc or predictive_accuracy. See the OpenML website for the complete list of measures.
            /tag/{tag} - returns only evaluations of runs tagged with the given tag.
            /run/{ids} - return only evaluations for specific runs, specified as a comma-separated list of run IDs, e.g. ''1,2,3''
            /task/{ids} - return only evaluations for specific tasks, specified as a comma-separated list of task IDs, e.g. ''1,2,3''
            /flow/{ids} - return only evaluations for specific flows, specified as a comma-separated list of flow IDs, e.g. ''1,2,3''
            /setup/{ids} - return only evaluations for specific setups, specified as a comma-separated list of setup IDs, e.g. ''1,2,3''
            /uploader/{ids} - return only evaluations uploaded by specific users, specified as a comma-separated list of user IDs, e.g. ''1,2,3''
            /limit/{limit}/offset/{offset} - returns only {limit} results starting from result number {offset}. Useful for paginating results. With /limit/5/offset/10, results 11..15 will be returned. Both limit and offset need to be specified.
            /per_fold/{true,false} - whether or not to return crossvalidation scores per fold. Defaults to 'false'. Setting it to 'true' leads to large numbers of results, use only for very specific sets of runs.
          required: true
          type: string
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - evaluation
      responses:
        '200':
          description: A list of evaluations descriptions
          schema:
            $ref: '#/definitions/EvaluationList'
          examples:
            application/json:
              evaluations:
                evaluation:
                  - run_id: '1'
                    task_id: '68'
                    flow_id: '61'
                    function: area_under_roc_curve
                    upload_time: '2014-04-06 23:30:40'
                    value: '0.839359'
                    array_data: '[0,0.99113,0.898048,0.874862,0.791282,0.807343,0.820674]'
                  - run_id: '1'
                    task_id: '68'
                    flow_id: '61'
                    function: f_measure
                    upload_time: '2014-04-06 23:30:40'
                    value: '0.600026'
                    array_data: '[0,0,0.711934,0.735714,0.601363,0.435678,0.430913]'
                  - run_id: '1'
                    task_id: '68'
                    flow_id: '61'
                    function: predictive_accuracy
                    upload_time: '2014-04-06 23:30:40'
                    value: '0.614634'
                    array_data: []
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            540 - Please provide at least task, flow or setup, uploader or run, to
            filter results, or limit the number of responses.
            541 - The input parameters (task_id, setup_id, flow_id, run_id, uploader_id) did not meet the constraints (comma separated list of integers).
            542 - There where no results. Check whether there are runs under the given constraint.
            543 - Too many results. Given the constraints, there were still too many results. Please add filters to narrow down the list.
            544 - Illegal filter specified.
            545 - Offset specified without limit.
            546 - Requested result limit too high.
            547 - Per fold can only be set to value "true" or "false".
            548 - Per fold queries are experimental and require a fair amount of filters on resulting run records to keep the query fast (use, e.g., flow, setup, task and uploader filter)
  '/evaluation/request/{evaluation_engine_id}/{order}':
    get:
      summary: >-
        Get an unevaluated run
      description: >
        This call is for people running their own evaluation engines. It returns the details of a run that is not yet evaluated by the given evaluation engine. It doesn't evaluate the run, it just returns the run info.
      parameters:
        - name: evaluation_engine_id
          in: path
          description: >-
            The ID of the evaluation engine. You get this ID when you register a new evaluation engine with OpenML. The ID of the main evaluation engine is 1.
          required: true
          type: string
        - name: order
          in: path
          description: >-
            When there are multiple runs still to evaluate, this defines which one to return. Options are 'normal' - the oldest run, 'reverse' - the newest run, or 'random' - a random run.
          required: true
          type: string
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - evaluation
      responses:
        '200':
          description: A list of evaluations descriptions
          schema:
            $ref: '#/definitions/EvaluationRequest'
          examples:
            application/json:
              evaluation_request:
                run:
                  - run_id: '8943712'
                    task_id: '3021'
                    setup_id: '68799271'
                    uploader: '1935'
                    upload_time: '2018-04-03 21:05:38'
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            100 - Function not valid.
            545 - No unevaluated runs according to the criteria.
            546 - Illegal filter.
  '/study/{id}':
    get:
      summary: Get study description by study id or alias
      description: >
        Returns information about the study with the given id or alias. 
      parameters:
        - name: id
          in: path
          description: ID or alias of the study.
          required: true
          type: string
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: false
          type: string
      tags:
        - study
      responses:
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            601 - Unknown study. The study with the given id or alias was not found in the database
        '200':
          description: A study description
          schema:
            $ref: '#/definitions/Study'
          examples:
            application/json: |-
              {
                "study": {
                  "id": "99",
                  "main_entity_type": "task",
                  "name": "CC18 benchmark suite",
                  "description": "CC18 benchmark suite",
                  "creation_date": "2019-02-16T17:35:58",
                  "creator": "1159",
                  "data": {"data_id": ["1","2","3"]},
                  "tasks": {"task_id": ["1","2","3"]}
                }
              }
    delete:
      summary: Delete study
      description: |
        Deletes a study. Upon success, it returns the ID of the deleted study.
      parameters:
        - name: id
          in: path
          description: Id of the study.
          required: true
          type: number
          format: integer
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - study
      responses:
        '200':
          description: ID of the deleted study
          schema:
            type: object
            properties:
              study_delete:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the deleted study, a positive integer'
          examples:
            application/json: |-
              {
                "study_delete": {
                  "id": "1"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            591 - Please provide API key. In order to remove your content, please authenticate.
            592 - Study does not exists. The study ID could not be linked to an existing study.
            593 - Study deletion failed. Please try again later.
  /study:
    post:
      summary: Create new study
      consumes:
        - multipart/form-data
      description: |
        Creates a new study. Upon success, it returns the study id.
      parameters:
        - name: description
          in: formData
          description: >-
            An XML file describing the study. Also see the [XSD
            schema](https://www.openml.org/api/v1/xsd/openml.study.upload) and an
            [XML example](https://www.openml.org/api/v1/xml_example/study).
          required: true
          type: file
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - study
      responses:
        '200':
          description: Id of the uploaded study
          schema:
            type: object
            properties:
              upload_study:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the uploaded study, a positive integer'
          examples:
            application/json: |-
              {
                "upload_study": {
                  "id": "4328"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            1031 - Description file not present. Please upload the study description.
            1032 - Problem validating uploaded description file. The XML description format does not meet the standards. See the XSD schema.
            1033 - Illegal main entity type. Currently only collections of tasks and can be created.
            1034 - Linked entities are not of the correct type fot this study.
            1035 - Benchmark suites can only be linked to run studies.
            1036 - Referred benchmark suite cannot be found.
            1037 - Referred benchmark suite should be a task collection.
            1038 - Study alias is not unique.
            1039 - Dataset insertion problem. Please contact the administrators.
  /study/list/{filters}:
    get:
      summary: List all studies (collections of items)
      description: >
        List studies, optionally filtered by a range of properties. Any number of properties can be combined by listing them one after the other in the form '/study/list/{filter}/{value}/{filter}/{value}/...' Returns an array with all studies that match the constraints.
      parameters:
        - name: filters
          in: path
          description: |
            Any combination of these filters
            /main_entity_type/{type} - only return studies collecting entities of a given type (e.g. 'task' or 'run').
            /uploader/{ids} - return only evaluations uploaded by specific users, specified as a comma-separated list of user IDs, e.g. ''1,2,3''
            /limit/{limit}/offset/{offset} - returns only {limit} results starting from result number {offset}. Useful for paginating results. With /limit/5/offset/10, results 11..15 will be returned. Both limit and offset need to be specified.
          required: true
          type: string
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - study
      responses:
        '200':
          description: A list of studies
          schema:
            $ref: '#/definitions/StudyList'
          examples:
            application/json: |-
              {
                "study_list":{
                  "study":[
                    {
                      "id":"1",
                      "alias":"Study_1",
                      "name":"A large-scale comparison of classification algorithms",
                      "creation_date":"2017-07-20 15:51:20",
                      "creator":"2"
                    },
                    {
                      "id":"2",
                      "alias":"Study_2",
                      "name":"Fast Algorithm Selection using Learning Curves",
                      "creation_date":"2017-07-20 15:51:20",
                      "creator":"2"
                    }
                  ]
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
  '/study/{id}/attach':
    post:
      summary: Attach a new entity to a study
      consumes:
        - multipart/form-data
      description: |
        Attach a new entity to an exising study. Upon success, it returns the study id, type, and linked entities.
      parameters:
        - name: id
          in: path
          description: Id of the study.
          required: true
          type: number
          format: integer
        - name: description
          in: formData
          description: >-
            An XML file describing the entities to be attached. Also see the [XSD
            schema](https://www.openml.org/api/v1/xsd/openml.study.attach) and an
            [XML example](https://www.openml.org/api/v1/xml_example/attach).
          required: true
          type: file
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - study
      responses:
        '200':
          description: Properties of the updated study
          schema:
            type: object
            properties:
              study_attach:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the study, a positive integer'
                  main_entity_type:
                    type: string
                    description: 'Main entity type of the of the study'
                  linked_entities:
                    type: string
                    description: 'The number of linked entities'
          examples:
            application/json: |-
              {
                "study_attach": {
                  "id": "1",
                  "main_entity_type": "task",
                  "linked_entities": "5"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            1041 - Could not find study. Check the study ID in your request.
            1042 - Cannnot attach entities to legacy studies.
            1043 - Please provide POST field 'ids'.
            1044 - Please ensure that the 'ids' in the POST field is a list of natural numbers.
            1045 - Could not attach entities to the study. It appears as if the entity does not exist.
  '/study/{id}/detach':
    post:
      summary: Detach an entity from a study
      consumes:
        - multipart/form-data
      description: |
        Detach an entity from an exising study. Upon success, it returns the study id, type, and linked entities.
      parameters:
        - name: id
          in: path
          description: Id of the study.
          required: true
          type: number
          format: integer
        - name: description
          in: formData
          description: >-
            An XML file describing the entities to be detached. Also see the [XSD
            schema](https://www.openml.org/api/v1/xsd/openml.study.detach) and an
            [XML example](https://www.openml.org/api/v1/xml_example/detach).
          required: true
          type: file
        - name: api_key
          in: query
          description: Api key to authenticate the user
          required: true
          type: string
      tags:
        - study
      responses:
        '200':
          description: Properties of the updated study
          schema:
            type: object
            properties:
              upload_study:
                type: object
                properties:
                  id:
                    type: string
                    description: 'ID of the study, a positive integer'
                  main_entity_type:
                    type: string
                    description: 'Main entity type of the of the study'
                  linked_entities:
                    type: string
                    description: 'The number of linked entities'
          examples:
            application/json: |-
              {
                "study_detach": {
                  "id": "1",
                  "main_entity_type": "task",
                  "linked_entities": "5"
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            1041 - Could not find study. Check the study ID in your request.
            1042 - Cannot attach entities to legacy studies.
            1043 - Please provide POST field 'ids'.
            1044 - Please ensure that the 'ids' in the POST field is a list of natural numbers.
            1046 - Could not detach entities from the study. It appears as if the entity does not exist.       
  /estimationprocedure/list:
    get:
      summary: List all estimation procedures
      description: >
        Returns an array with all model performance estimation procedures in the
        system.
      parameters:
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - estimationprocedure
      responses:
        '200':
          description: A list of estimation procedures
          schema:
            $ref: '#/definitions/EstimationProcedureList'
          examples:
            application/json: |-
              {
                "estimationprocedures": {
                  "estimationprocedure": [
                    {
                       "id":"1",
                       "ttid":"1",
                       "name":"10-fold Crossvalidation",
                       "type":"crossvalidation",
                       "repeats":"1",
                       "folds":"10",
                       "stratified_sampling":"true"
                    },
                    {
                      "id":"2",
                      "ttid":"1",
                      "name":"5 times 2-fold Crossvalidation",
                      "type":"crossvalidation",
                      "repeats":"5",
                      "folds":"2",
                      "stratified_sampling":"true"
                    }
                  ]
                }
              }
        '412':
          schema:
            $ref: '#/definitions/Error'
          description: |
            Precondition failed. An error code and message are returned.
            500 - No model performance estimation procedures available.
  /estimationmeasure/list:
    get:
      summary: List all evaluation measures
      description: >
        Returns an array with all model evaluation measures in the system.
      parameters:
        - name: api_key
          in: query
          description: API key to authenticate the user
          required: false
          type: string
      tags:
        - estimationmeasure
      responses:
        '200':
          description: A list of evaluation measures
          schema:
            $ref: '#/definitions/EvaluationMeasureList'
          examples:
            application/json: |-
              {
                "evaluation_measures":{
                  "measures":{
                    "measure":[
                      "area_under_roc_curve",
                      "average_cost",
                      "binominal_test",
                      "build_cpu_time"
                      ]
                  }
                }
              }
definitions:
  Flow:
    type: object
    properties:
      flow_description:
        type: object
        properties:
          id:
            type: string
            description: 'ID of the flow, a positive integer'
          uploader:
            type: string
            description: The uploader of the flow
          name:
            type: string
            description: The name of the flow
          version:
            type: string
            description: 'The version of the flow, set by OpenML. A positive integer'
          version_label:
            type: string
            description: >-
              The version of the flow, as defined by the uploader, for
              reference. Can be any format as long as it is unique.
          description:
            type: string
            description: 'Wiki description of the flow, in (Git flavoured) markdown format'
          upload_date:
            type: string
            description: >-
              The datetime that the flow was uploaded, format yyyy-MM-dd
              HH:mm:ss
          language:
            type: string
            description: The programming language the flow is written in.
          dependencies:
            type: string
            description: >-
              The libraries that this flow depends on, and their version
              numbers.
          tag:
            type: array
            items:
              type: string
            description: >-
              Tags added by OpenML users. Includes study tags in the form
              `study_1`
          parameter:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the parameter
                data_type:
                  type: string
                  description: The data type of the parameter
                default_value:
                  type: string
                  description: The default value of the parameter
                description:
                  type: string
                  description: A description of the parameter
  FlowList:
    type: object
    properties:
      flows:
        type: object
        properties:
          flow:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: The flow ID
                full_name:
                  type: string
                  description: The full flow name (name + internal version number)
                name:
                  type: string
                  description: The flow name
                version:
                  type: string
                  description: The internal flow version
                external_version:
                  type: string
                  description: The external flow version
                uploader:
                  type: string
                  description: The ID of the person who uploaded the flow
  Task:
    type: object
    properties:
      task_description:
        type: object
        properties:
          task_id:
            type: string
            description: 'ID of the task, a positive integer'
          task_type:
            type: string
            description: 'The type of the task, e.g. Supervised Classification'
          input:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the input, e.g. source_data'
                data_set:
                  type: object
                  properties:
                    data_set_id:
                      type: string
                      description: The id of the dataset
                    target_feature:
                      type: string
                      description: The name of the target feature for this task
                estimation_procedure:
                  type: object
                  properties:
                    type:
                      type: string
                      description: 'The type of procedure, e.g. crossvalidation'
                    data_splits_url:
                      type: string
                      description: The url where the data splits can be downloaded
                    parameter:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: The name of the parameter
                          value:
                            type: string
                            description: The value of the parameter
                cost_matrix:
                  type: array
                  items:
                    type: array
                    items:
                      type: integer
                      format: int64
                  description: >-
                    The cost matrix, indicating the costs for each type of
                    misclassification
                evaluation_measures:
                  type: object
                  properties:
                    evaluation_measure:
                      type: string
                      description: The evaluation measure to optimize in this task
          output:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the output, e.g. predictions'
                predictions:
                  type: object
                  properties:
                    format:
                      type: string
                      description: 'The fromat of the predictions, e.g. ARFF'
                    feature:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: 'The name of the prediction feature, e.g. row_id'
                          type:
                            type: string
                            description: 'The type of the prediction feature, e.g. integer'
          tag:
            type: array
            items:
              type: string
              description: >-
                Tags added by OpenML users. Includes study tags in the form
                `study_1`
  TaskList:
    type: object
    properties:
      task:
        type: object
        properties:
          task:
            type: array
            items:
              type: object
              properties:
                task_id:
                  type: string
                  description: The ID of the task
                task_type:
                  type: string
                  description: The type of task (e.g. Supervised Classificationr)
                did:
                  type: string
                  description: The id of the source dataset
                name:
                  type: string
                  description: The name of the source dataset
                status:
                  type: string
                  description: >-
                    The status of the source dataset, active, in_preparation, or
                    deactivated
                format:
                  type: string
                  description: The format of the source dataset
                input:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the input
                      value:
                        type: string
                        description: The value of the input
                quality:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the quality
                      value:
                        type: string
                        description: The value of the quality
                tag:
                  type: array
                  items:
                    type: string
                    description: >-
                      Tags added by OpenML users. Includes study tags in the
                      form `study_1`
  EvaluationMeasureList:
    type: object
    properties:
      evaluation_measures:
        type: object
        properties:
          measures:
            type: object
            properties:
              measure:
                type: array
                items:
                  type: string
                  description: The evaluation measure name
  EstimationProcedureList:
    type: object
    properties:
      estimationprocedures:
        type: object
        properties:
          estimationprocedure:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: The estimation procedure ID
                ttid:
                  type: string
                  description: The task type ID
                name:
                  type: string
                  description: >-
                    The estimation procedure name, e.g. '10 fold
                    Crossvalidation'
                type:
                  type: string
                  description: 'The estimation procedure type, e.g. ''crossvalidation'''
                repeats:
                  type: string
                  description: 'The number of repeats, e.g. ''10'''
                folds:
                  type: string
                  description: 'The number of cross-validation folds, e.g. ''10'''
                stratified_sampling:
                  type: string
                  description: 'Whether or not the sampling is stratified, ''true'' or ''false'''
  DataList:
    type: object
    properties:
      data:
        type: object
        properties:
          dataset:
            type: array
            items:
              type: object
              properties:
                did:
                  type: string
                  description: The dataset ID
                name:
                  type: string
                  description: The dataset name
                status:
                  type: string
                  description: >-
                    The dataset status, either in_preparation, active, or
                    deactivated
                format:
                  type: string
                  description: 'The data format of the dataset, e.g. ARFF'
                quality:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the property
                      value:
                        type: string
                        description: The value of the property
  DataQualities:
    type: object
    properties:
      data_qualities:
        type: object
        properties:
          quality:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the dataset quality measures
                value:
                  type: string
                  description: The value for this dataset
  DataQualityList:
    type: object
    properties:
      data_qualities_list:
        type: object
        properties:
          quality:
            type: array
            items:
              type: string
  DataFeatures:
    type: object
    properties:
      data_features:
        type: object
        properties:
          feature:
            type: array
            items:
              type: object
              properties:
                index:
                  type: string
                  description: Feature index
                name:
                  type: string
                  description: Feature name
                data_type:
                  type: string
                  description: Feature data type
                is_target:
                  type: string
                  description: Whether this feature is seen as a target feature
                is_ignore:
                  type: string
                  description: >-
                    Whether this feature should be ignored in modelling (e.g.
                    every value is unique)
                is_row_identifier:
                  type: string
                  description: Whether this feature is a row identifier
  Data:
    type: object
    properties:
      data_set_description:
        type: object
        required:
          - name
          - description
          - format
        properties:
          id:
            type: string
            description: 'ID of the dataset, a positive integer'
          name:
            type: string
            description: The name of the dataset
          version:
            type: string
            description: 'The version of the dataset, set by OpenML. A positive integer'
          description:
            type: string
            description: >-
              Wiki description of the dataset, in (Git flavoured) markdown
              format
          format:
            type: string
            description: 'Data format, for instance ARFF'
          upload_date:
            type: string
            description: >-
              The datetime that the dataset was uploaded, format yyyy-MM-dd
              HH:mm:ss
          licence:
            type: string
            description: >-
              The licence granted for using the dataset, for instance Public or
              CC-BY
          url:
            type: string
            description: The URL where the data can be downloaded
          file_id:
            type: string
            description: The ID of the dataset file stored on the OpenML server
          default_target_attribute:
            type: string
            description: >-
              For tabular data, the name of the column that is typically used as
              the target attribute for that data set
          version_label:
            type: string
            description: >-
              The version of the dataset, as defined by the uploader, for
              reference. Can be any format as long as it is unique.
          tag:
            type: array
            items:
              type: string
            description: >-
              Tags added by OpenML users. Includes study tags in the form
              `study_1`
          visibility:
            type: string
            description: Who can see the dataset. For instance `public`.
          original_data_url:
            type: string
            description: The URL where the original data is hosted.
          status:
            type: string
            description: 'active, in_preparation, or deactivated'
          md5_checksum:
            type: string
            description: Checksum to verify downloads of the dataset
  RunList:
    type: object
    properties:
      runs:
        type: object
        properties:
          run:
            type: array
            items:
              type: object
              properties:
                run_id:
                  type: string
                  description: The run ID
                task_id:
                  type: string
                  description: The ID of the task solved by this run
                setup_id:
                  type: string
                  description: Ignore (internal representation of the parameter setting)
                flow_id:
                  type: string
                  description: The ID of the flow used in this run
                uploader:
                  type: string
                  description: The ID of the person uploading this run
                error_message:
                  type: string
                  description: Error message generated by the run (if any)
  EvaluationList:
    type: object
    properties:
      evaluations:
        type: object
        properties:
          evaluation:
            type: array
            items:
              type: object
              properties:
                run_id:
                  type: string
                  description: The run ID
                task_id:
                  type: string
                  description: The ID of the tasks solved by this run
                flow_id:
                  type: string
                  description: The ID of the flow used by this run
                function:
                  type: string
                  description: The name of the evaluation function
                value:
                  type: string
                  description: The outcome of the evaluation
                array_data:
                  type: string
                  description: >-
                    For structured evaluation measures, an array of evaluation
                    values (e.g. per-class predictions, evaluation matrices,...)
  EvaluationRequest:
    type: object
    properties:
      evaluation_request:
          type: object
          properties:
            run:
              type: object
              properties:
                run_id:
                  type: string
                  description: 'ID of the run, a positive integer'
                task_id:
                  type: string
                  description: 'ID of the task, a positive integer'
                setup_id:
                  type: string
                  description: 'ID of the setup, a positive integer'
                uploader:
                  type: string
                  description: 'ID of the uploader, a positive integer'
                upload_time:
                  type: string
                  description: >-
                    The datetime that the dataset was uploaded, format yyyy-MM-dd
                    HH:mm:ss
  DataUnprocessed:
    type: object
    properties:
      data_unprocessed:
          type: object
          properties:
            dataset:
              type: object
              properties:
                did:
                  type: string
                  description: 'ID of the dataset a positive integer'
                name:
                  type: string
                  description: 'The name of the dataset'
                version:
                  type: string
                  description: 'Version of the dataset, a positive integer'
                status:
                  type: string
                  description: 'Status of the dataset'
                format:
                  type: string
                  description: >-
                    The dataset format, e.g. ARFF
  Setup:
    type: object
    properties:
      setup_parameters:
        type: object
        properties:
          flow_id:
            type: string
            description: 'ID of the flow, a positive integer'
          parameter_setting:
            type: array
            items:
              type: object
              description: Hyperparameter settings. Can be multiple.
              properties:
                full_name:
                  type: string
                  description: The full name of the hyperparameter
                parameter_name:
                  type: string
                  description: The short name of the hyperparameter
                data_type:
                  type: string
                  description: The data type of the hyperparameter value
                default_value:
                  type: string
                  description: The default value of the parameter used
                value:
                  type: string
                  description: The value of the parameter used
  Run:
    type: object
    properties:
      run_description:
        type: object
        properties:
          id:
            type: string
            description: 'ID of the run, a positive integer'
          uploader:
            type: string
            description: The uploader of the run
          uploader_name:
            type: string
            description: The name of the uploader of the run
          task_id:
            type: string
            description: The id of the task solved by this run
          task_type:
            type: string
            description: 'The type of task solved by this run (e.g., classification)'
          task_evaluation_measure:
            type: string
            description: >-
              The evaluation measure that is supposed to be optimized in the
              task, if any
          flow_id:
            type: string
            description: The id of the flow used in this run
          flow_name:
            type: string
            description: The name of the flow used in this run
          setup_string:
            type: string
            description: >-
              Configuration of the flow as a string, to be interpreted by the
              flow, its library, or command line interface.
          tag:
            type: array
            items:
              type: string
            description: >-
              Tags added by OpenML users. Includes study tags in the form
              `study_1`
          parameter_setting:
            type: array
            items:
              type: object
              description: Parameter settings used in this run. Can be multiple.
              properties:
                name:
                  type: string
                  description: The name of the parameter
                value:
                  type: string
                  description: The value of the parameter used
          input_data:
            type: object
            description: The input data for this run.
            properties:
              dataset:
                type: object
                properties:
                  did:
                    type: string
                    description: The id of the dataset
                  name:
                    type: string
                    description: The name of the dataset
                  url:
                    type: string
                    description: The download url of the dataset
          output_data:
            type: object
            description: The data generated by this run.
            properties:
              file:
                type: array
                items:
                  type: object
                  description: >-
                    Files uploaded by the user, e.g. run description,
                    predictions. Can be multiple.
                  properties:
                    did:
                      type: string
                      description: The id of the uploaded file
                    file_id:
                      type: string
                      description: >-
                        The reference id of the uploaded file, for downloading
                        afterward
                    name:
                      type: string
                      description: >-
                        The name of the uploaded file (e.g., description,
                        predictions, model,...)
              evaluation:
                type: array
                items:
                  type: object
                  description: >-
                    Evaluations uploaded by the user, e.g. runtimes, or computed
                    by the server (after run upload). Can be multiple.
                  properties:
                    name:
                      type: string
                      description: The name of the evaluation measure
                    flow_id:
                      type: string
                      description: >-
                        The id of the code used to compute this evaluation
                        method
                    value:
                      type: string
                      description: The result of the evaluation
                    array_data:
                      type: string
                      description: >-
                        For composite evaluation measures (e.g. per-class
                        measures, confusion matrix), a string (JSON)
                        representation of the   evaluation.
  TaskType:
    type: object
    properties:
      id:
        type: string
        description: 'ID of the task type, a positive integer'
      name:
        type: string
        description: 'The name of the task type, e.g. Supervised Classification'
      description:
        type: string
        description: A description of the task type
      contributor:
        type: array
        items:
          type: string
          description: A list of people who defined the task type
      date:
        type: string
        description: The date when the task type was created
      input:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: 'The name of the input, e.g. source_data'
            data_set:
              type: object
              properties:
                data_set_id:
                  type: string
                  description: The id of the dataset
                target_feature:
                  type: string
                  description: The name of the target feature for this task
            estimation_procedure:
              type: object
              properties:
                type:
                  type: string
                  description: 'The type of procedure, e.g. crossvalidation'
                data_splits_url:
                  type: string
                  description: The url where the data splits can be downloaded
                parameter:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the parameter
                      value:
                        type: string
                        description: The value of the parameter
            cost_matrix:
              type: array
              items:
                type: array
                items:
                  type: integer
                  format: int64
                description: >-
                  The cost matrix, indicating the costs for each type of
                  misclassification
            evaluation_measures:
              type: object
              properties:
                evaluation_measure:
                  type: string
                  description: The evaluation measure to optimize in this task
      output:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: 'The name of the output, e.g. predictions'
            predictions:
              type: object
              properties:
                format:
                  type: string
                  description: 'The format of the predictions, e.g. ARFF'
                feature:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: 'The name of the prediction feature, e.g. row_id'
                      type:
                        type: string
                        description: 'The type of the prediction feature, e.g. integer'
  TaskTypeList:
    type: object
    properties:
      task_types:
        type: object
        properties:
          task_type:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the task type
                name:
                  type: string
                  description: The name of the task type
                description:
                  type: string
                  description: A description of the task type
                creator:
                  type: string
                  description: A comma-separated list of the task type creators
  Study:
    type: object
    properties:
      study:
        type: object
        properties:
          id:
            type: string
            description: The ID of the study
          alias:
            type: string
            description: The alias of the study
          main_entity_type:
            type: string
            description: The type of entity collected in the study (e.g. task or run)
          name:
            type: string
            description: The name of the study
          creation_date:
            type: string
            description: The datetime that the dataset was uploaded, format yyyy-MM-dd HH:mm:ss
          creator:
            type: string
            description: A comma-separated list of the study creators
          tag:
            type: object
            properties:
              name:
                type: string
                description: The name of the study (e.g. study_1)
              write_access:
                type: string
                description: The write access level of the study (e.g. public)
          data:
            type: object
            description: The IDs of the datasets that are directly or indirectly linked to the study (e.g. because it is part of a task that belongs to the study)
            properties:
              data_id:
                type: array
                items:
                  type: string
          tasks:
            type: object
            description: The IDs of the tasks that are directly or indirectly linked to the study (e.g. because it is part of a run that belongs to the study)
            properties:
              task_id:
                type: array
                items:
                  type: string
          flows:
            type: object
            description: The IDs of the flows that are directly or indirectly linked to the study (e.g. because it is part of a run that belongs to the study)
            properties:
              flow_id:
                type: array
                items:
                  type: string
          runs:
            type: object
            description: The IDs of the runs attached to this study    
            properties:
              run_id:
                type: array
                items:
                  type: string          
  StudyList:
    type: object
    properties:
      study_list:
        type: object
        properties:
          study:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the study
                alias:
                  type: string
                  description: The alias of the study
                name:
                  type: string
                  description: The name of the study
                creation_date:
                  type: string
                  description: The datetime that the dataset was uploaded, format yyyy-MM-dd HH:mm:ss
                creator:
                  type: string
                  description: A comma-separated list of the study creators
  RunTrace:
    type: object
    properties:
      trace:
        type: object
        properties:
          run_id:
            type: string
            description: run ID
          trace_iteration:
            type: array
            items:
              type: object
              properties:
                repeat:
                  type: string
                  description: The number of the repeat in the outer cross-valudation
                fold:
                  type: string
                  description: The number of the fold in the inner cross-validation
                iteration:
                  type: string
                  description: A number of the optimization iteration
                setup_string:
                  type: string
                  description: A JSON representation of the setup (configuration) 
                evaluation:
                  type: string
                  description: The evaluation score of the setup
                selected:
                  type: string
                  description: Whether this setup was selected as the best one (true or false)
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      additional_message:
        type: string