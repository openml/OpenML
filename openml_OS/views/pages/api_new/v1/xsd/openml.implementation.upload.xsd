<!-- Schema for flow description. Note that it is used both for 
     uploading and downloading a dataset. Some fields, such as ID, 
     uploader, upload_date, are ignored during uploading, since these 
     are to be generated by the server. -->

<xs:schema targetNamespace="http://openml.org/openml" xmlns:oml="http://openml.org/openml" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
<xs:element name="flow" type="oml:flow"/>
<xs:complexType name="flow">
  <xs:sequence>
    <xs:element name="id" minOccurs="0" type="xs:int"/>  <!-- ID of the flow. Generated by the server, based on name and version of the flow. Ignored when uploaded manually. -->
    <xs:element name="uploader" minOccurs="0" type="xs:int"/>  <!-- The user that uploaded the flow. Added by the server. Ignored when uploaded manually. -->
    <!-- dublin core -->
    <xs:element name="name" type="oml:casual_string1024"/> <!-- The name given to this flow, serializable -->
    <xs:element name="custom_name" minOccurs="0" type="oml:basic_latin128"/> <!-- Custom name given to this flow by the owner -->
    <xs:element name="class_name"  minOccurs="0" type="oml:casual_string128"/> <!-- The (dev language) name of the class -->
    <xs:element name="version" minOccurs="0" type="xs:int"/> <!-- The version of the flow. Default is 1. Ignored at upload time. -->
    <xs:element name="external_version" minOccurs="0" type="oml:casual_string128"/> <!-- A external version, defined by the user. In combination with the name, it must be unique. It is recommended to use the md5 hash of the source code, that way any change in source code will give a unique version number (like GitHub does). It can be used to retrieve the flow later on. If left empty, an md5 hash of either the source or the binary file will be used. -->
    <xs:element name="description" type="oml:basic_latin1024"/> <!-- Description of the flow, given by the user who uploaded it. -->
    <xs:element name="creator" minOccurs="0" maxOccurs="unbounded" type="oml:casual_string128"/>  <!-- The persons/institutions that created the flow. -->
    <xs:element name="contributor" minOccurs="0" maxOccurs="unbounded" type="oml:casual_string128"/>  <!-- Other people that contributed to the flow. -->
    <xs:element name="upload_date" minOccurs="0" maxOccurs="1" type="xs:dateTime"/>  <!-- The date-time, generated by server, on which the flow was uploaded. Format YYYY-mm-ddThh:MM:SS. Added by the server. Ignored when uploaded manually. -->
    <xs:element name="licence" minOccurs="0" maxOccurs="1" type="oml:casual_string64"/> <!-- Licence of the flow. If not there, means: Public Domain or "dont know / care" -->
    <!-- textual info (for search) -->
    <xs:element name="language" minOccurs="0" maxOccurs="1" type="oml:casual_string128"/>  <!-- Language in which the flow is described. Starts with 1 upper case letter, rest lower case, e.g. 'English' -->
    <xs:element name="full_description" minOccurs="0" maxOccurs="1" type="oml:basic_latin1024"/> <!-- Full description of the workflow, e.g. man pages filled in by tool. This is a much more elaborate description that given in the 'description' field. It may include information about all components of the workflow.-->
    <xs:element name="installation_notes" minOccurs="0" maxOccurs="1" type="oml:basic_latin1024"/> <!-- Optional. How to run the workflow, are there additional hints? -->
    <!-- technical info -->
    <xs:element name="dependencies" minOccurs="0" maxOccurs="1" type="oml:basic_latin1024"/> <!-- Optional. Dependencies of this flows: environments, software packages or libraries necessary to run it. -->
    <!-- other -->
    <xs:element name="implements" minOccurs="0" maxOccurs="1" type="oml:casual_string128"/> <!-- Ontological reference -->
    <!-- structure -->
    <xs:element name="parameter" minOccurs="0" maxOccurs="unbounded" type="oml:parameter"/> <!-- Statement of the (global/top-level) parameters of the workflow (see below). -->
    <xs:element name="component" minOccurs="0" maxOccurs="unbounded" type="oml:component"/> <!-- Sub-components of this flow -->
    <!-- qualities -->
    <xs:element name="quality" minOccurs="0" maxOccurs="unbounded" type="oml:quality"/> <!-- Qualities of the algorithm  -->
    <xs:element name="tag" minOccurs="0" maxOccurs="unbounded" type="oml:system_string128"/> <!-- Tags, describing the algorithms  -->
    <!-- download -->
    <xs:element name="source_url" minOccurs="0" maxOccurs="1" type="xs:anyURI"/> <!-- Url from which the source code can be downloaded. Added by the server. Ignored when uploaded manually. -->
    <xs:element name="binary_url" minOccurs="0" maxOccurs="1" type="xs:anyURI"/> <!-- Url from which the binary can be downloaded. Added by the server. Ignored when uploaded manually. -->
    <xs:element name="source_format" minOccurs="0" maxOccurs="1" type="oml:system_string128"/> <!-- Format in which the source code was uploaded. -->
    <xs:element name="binary_format" minOccurs="0" maxOccurs="1" type="oml:system_string128"/> <!-- Format in which the binary code was uploaded.  -->
    <xs:element name="source_md5" minOccurs="0" maxOccurs="1" type="oml:system_string128"/> <!-- MD5 checksum to check if the source code was correctly downloaded -->
    <xs:element name="binary_md5" minOccurs="0" maxOccurs="1" type="oml:system_string128"/> <!-- MD5 checksum to check if the binary code was correctly downloaded -->
  </xs:sequence>
</xs:complexType>
<xs:complexType name="quality">
  <xs:sequence>
    <xs:element name="name" type="oml:system_string128" /> <!-- name of the quality. Suggested: LearnerType (classification, regression, cost sensitive classification, survival analysis, clustering), HandlesNumericFeatures, HandlesNominalFeatures, HandlesMissingValues, HandlesInstanceWeights, HandlesMultiClass, HandlesBinaryClass, HandlesSingleClass, HandlesOrderedFeatures, HandlesCostMatrices, HandlesClassWeights, CanOutputProbabilities (classification+clustering), CanOutputStandardError (regression) -->
    <xs:element name="value" type="oml:system_string128"/> <!-- value. e.g. 'true' or 'false' -->
  </xs:sequence>
</xs:complexType>
<xs:complexType name="component">
  <xs:sequence>
    <xs:element name="identifier" type="oml:system_string128" />
    <xs:element name="flow" type="oml:flow"/> <!-- Sub-flow of this flow. Typically components (operators/nodes) of a workflow or subfunctions of an algorithm (e.g. kernels). Components can have their own parameters. -->
  </xs:sequence>
</xs:complexType>
<xs:complexType name="parameter">
  <xs:sequence>
    <xs:element name="name" type="oml:casual_string1024"/>  <!-- The name of the parameter -->
    <xs:element name="data_type" minOccurs="0" maxOccurs="1" type="oml:basic_latin128"/> <!-- Data type of the parameter. Should be either integer, numeric, string, vector, matrix, object. -->
    <xs:element name="default_value" minOccurs="0" maxOccurs="1" type="oml:basic_latin2048"/> <!-- Default value of the parameter. -->
    <xs:element name="description" minOccurs="0" maxOccurs="1" type="oml:basic_latin1024"/> <!-- Description of what this parameter does. -->
    <xs:element name="recommendedRange" minOccurs="0" maxOccurs="1" type="oml:basic_latin1024"/> <!-- Describes minimum value, maximun value and/or a recommended range of values. -->
  </xs:sequence>
</xs:complexType>
<xs:simpleType name="system_string128"> <!-- Subset on xs:string. Highly restricted form of string. URL-friendly -->
  <xs:restriction base="xs:string">
     <xs:pattern value="([a-zA-Z0-9_\-\.])+"/>
     <xs:maxLength value="128" />
     <xs:minLength value="1" />
  </xs:restriction>
</xs:simpleType>
<xs:simpleType name="casual_string1024"> <!-- Subset on xs:string. Slightly restricted form of string, but not neccessarilly URL-friendly -->
  <xs:restriction base="xs:string">
    <xs:pattern value="([a-zA-Z0-9_\-\.,\(\):=])+"/>
    <xs:maxLength value="1024" />
     <xs:minLength value="1" />
  </xs:restriction>
</xs:simpleType>
<xs:simpleType name="casual_string128"> <!-- Subset on xs:string. Slightly restricted form of string, but not neccessarilly URL-friendly -->
  <xs:restriction base="xs:string">
    <xs:pattern value="([a-zA-Z0-9_\-\.,\(\):=])+"/>
    <xs:maxLength value="128" />
     <xs:minLength value="1" />
  </xs:restriction>
</xs:simpleType>
<xs:simpleType name="casual_string64"> <!-- Subset on xs:string. Slightly restricted form of string, but not neccessarilly URL-friendly -->
  <xs:restriction base="xs:string">
    <xs:pattern value="([a-zA-Z0-9_\-\.,\(\):=])+"/>
    <xs:maxLength value="64" />
     <xs:minLength value="1" />
  </xs:restriction>
</xs:simpleType>
<xs:simpleType name="basic_latin128">
    <xs:restriction base="xs:string">
      <xs:pattern value="\p{IsBasicLatin}*"/>
      <xs:maxLength value="128" />
      <xs:minLength value="1" />
    </xs:restriction>
</xs:simpleType>
<xs:simpleType name="basic_latin1024">
  <xs:restriction base="xs:string">
    <xs:pattern value="\p{IsBasicLatin}*"/>
    <xs:maxLength value="1024" />
    <xs:minLength value="1" />
  </xs:restriction>
</xs:simpleType>
<xs:simpleType name="basic_latin2048"> <!-- TODO: NOTE THAT MIN LENGTH IS 0. CHANGE WHEN OK? -->
  <xs:restriction base="xs:string">
    <xs:pattern value="\p{IsBasicLatin}*"/>
    <xs:maxLength value="2048" />
    <xs:minLength value="0" />
  </xs:restriction>
</xs:simpleType>
</xs:schema>
