<xs:schema targetNamespace="http://openml.org/openml" xmlns:oml="http://openml.org/openml" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
<xs:element name="task" type="oml:task" />
<xs:complexType name="task">
	<xs:sequence>
		<xs:element name="task_id" type="xs:integer" />		<!-- The id of this task. Generated by the API. -->
		<xs:element name="task_type" type="xs:string" />	<!-- The task type of this task. Task types can be browsed and created on the OpenML website. -->
		<xs:element name="input" minOccurs="1" maxOccurs="unbounded" type="oml:task_input" />		<!-- The inputs given for this task (e.g. datasets) -->
		<xs:element name="parameter" minOccurs="0" maxOccurs="unbounded" type="oml:task_parameter" />	<!-- Parameter settings for this task (depends on the task type -->
		<xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="oml:task_output" />		<!-- Outputs expected after running this task -->
		<xs:element name="tag" minOccurs="0" maxOccurs="unbounded" type="oml:system_string" />		<!-- Tags, describing the (data of the) task -->
	</xs:sequence>
</xs:complexType>
<xs:complexType name="task_parameter">
	<xs:simpleContent>
		<xs:extension base="xs:string">
			<xs:attribute name="name" type="xs:string" />	<!-- The name of the task parameter. The value must be set in the body of this element. -->
		</xs:extension>
	</xs:simpleContent>
	</xs:complexType>
<xs:complexType name="task_IO">				<!-- all tasks inputs and outputs are named with a 'name' attribute -->
	<xs:attribute name="name" type="xs:string" />
</xs:complexType>
<xs:complexType name="task_input">
    <xs:complexContent>
	<xs:extension base="oml:task_IO">
	<xs:choice>						<!-- A task input can be either one of the following: -->
		<xs:element name="data_set" type="oml:data_set" />	<!-- A data set. For now, this is an ARFF file. -->
		<xs:element name="estimation_procedure" type="oml:estimation_procedure" />	<!-- An estimation procedure description, e.g. cross-validation -->
		<xs:element name="evaluation_measures" type="oml:evaluation_measures" />	<!-- A list of evaluation measures to optimise for in this task -->
		<xs:element name="cost_matrix" type="oml:array_string" />	<!-- A list of evaluation measures to optimise for in this task -->
	</xs:choice>
	</xs:extension>
    </xs:complexContent>
</xs:complexType>
<xs:complexType name="estimation_procedure">
	<xs:sequence>
		<xs:element name="type" type="xs:string" />		<!-- The type of procedure used for performance estimation: either cross-validation, holdout, bootstrap or sampling -->
		<xs:element name="data_splits_url" minOccurs="0" maxOccurs="1" type="xs:string" />	<!-- The url where a file with train-test splits can be downloaded -->
		<xs:element name="parameter" minOccurs="0" maxOccurs="unbounded" type="oml:task_parameter" />	<!-- Any parameters for the estimation procedure, e.g. the number of repeats and folds in cross-validation. -->
	</xs:sequence>
</xs:complexType>
<xs:complexType name="evaluation_measures">
	<xs:sequence>
		<xs:element name="evaluation_measure" minOccurs="1" maxOccurs="unbounded" type="xs:string" />	<!-- A list of evaluation measures to be optimized by the implementation. -->
	</xs:sequence>
</xs:complexType>
<xs:complexType name="task_output">
    <xs:complexContent>
	<xs:extension base="oml:task_IO">
	<xs:choice>							<!-- A task output can be either of the following: -->
		<xs:element name="data_set" type="oml:data_set" />	<!-- A data set. For now, this is an ARFF file. -->
		<xs:element name="predictions" type="oml:predictions" /><!-- A predictions file. This is a more specific ARFF file that contains predictions given by a predictive model trained by the implementation. The exact features depend on the estimation procedure: e.g., for a cross-validation procedure, predictions are expected per fold and per repeat. Also, for probabilistic classification models, a class confidence value can be given for each class -->
	</xs:choice>
	</xs:extension>
    </xs:complexContent>
</xs:complexType>
<xs:complexType name="data_set">
	<xs:sequence>
		<xs:element name="data_set_id" type="xs:integer" />	<!-- The data set id. With this id, a full data set description can be retrieved from the API -->
		<xs:element name="target_feature" minOccurs="0" maxOccurs="unbounded" type="xs:string" />	<!-- Any target features of the dataset to be used in this task. Depending on the task type there may be none, exactly one, or multiple, task features -->
	</xs:sequence>
</xs:complexType>

<xs:complexType name="predictions">
	<xs:sequence>
		<xs:element name="format" type="xs:string" />	<!-- The format of the predictions file, this is always ARFF for now -->
		<xs:element name="feature" minOccurs="1" maxOccurs="unbounded" type="oml:feature" />	<!-- The features expected in the predictions file. -->
	</xs:sequence>
</xs:complexType>
<xs:complexType name="feature">
	<xs:attribute name="name" type="xs:string" />		<!-- The name of the feature in the ARFF file. A dot-notation can be used to signify multiple features. E.g., confidence.classvalue means that there may be one feature per class value -->
	<xs:attribute name="type" type="xs:string" />		<!-- The data type of the feature. Can be integer, numeric, string, array, matrix, object. -->
	<xs:attribute name="required" type="xs:boolean" />	<!-- Whether this feature is required in the output or not. E.g., class confidences are optional because not all models return them. -->
</xs:complexType>
<xs:simpleType name="system_string"> <!-- Subset on xs:string. Highly restricted form of string. URL-friendly -->
  <xs:restriction base="xs:string">
     <xs:pattern value="([a-zA-Z0-9_\-\.])+"/>
  </xs:restriction>
</xs:simpleType>
<xs:simpleType name="array_string"> <!-- Subset on xs:string. Should contain an array. (TODO: improve check) -->
  <xs:restriction base="xs:string">
     <xs:pattern value="([0-9\s\[\],])+"/>
  </xs:restriction>
</xs:simpleType>
</xs:schema>

